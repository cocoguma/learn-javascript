(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{311:function(t,s,a){"use strict";a.r(s);var n=a(14),r=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量"}},[t._v("#")]),t._v(" 变量")]),t._v(" "),s("p",[t._v("声明：使用关键词生成局部变量/不使用关键词生成全局变量。")]),t._v(" "),s("p",[t._v("运算：undefined在boolean中为false，在number中则为NaN，对应的null则会转为0，boolean中同样为false。")]),t._v(" "),s("p",[t._v("变量提升：")]),t._v(" "),s("ul",[s("li",[t._v("var：允许先使用变量后声明变量，但使用时变量的值为undefined")]),t._v(" "),s("li",[t._v("const/let：同样会被提升到代码块的顶部但是不会赋予初始值，使用时会抛出错误(ReferenceError)。这个变量从代码块一开始时处于一个“暂时性死区”，直到这个变量被声明为止。")]),t._v(" "),s("li",[t._v("函数：函数声明(直接用function定义函数)会被提升到顶部，但函数表达式(var baz = function(){})无法被提升，哪怕是用var定义。")])]),t._v(" "),s("h2",{attrs:{id:"数据类型与结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据类型与结构"}},[t._v("#")]),t._v(" 数据类型与结构")]),t._v(" "),s("p",[t._v("基本数据类型：\nboolean、null、undefined、number、bigInt、string、symbol、object")]),t._v(" "),s("p",[t._v("数据类型的转换：")]),t._v(" "),s("ul",[s("li",[t._v("数字转字符串：+运算符即可，注意-运算符时会将string转为number。")]),t._v(" "),s("li",[t._v("字符串转数字：一元加法运算符")])]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1.1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1.1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 加入括号是为了清楚展示，并非必需的")]),t._v("\n")])])]),s("h2",{attrs:{id:"字面量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字面量"}},[t._v("#")]),t._v(" 字面量")]),t._v(" "),s("p",[t._v("字面量是脚本中按字面意思给出的固定的值，而不是变量。\n注意：")]),t._v(" "),s("ol",[s("li",[t._v("在es6中，对象字面值扩展了:支持在创建时设置原型、简化了属性值与属性名相同时的写法、方法定义、支持父方法调用以及动态计算属性名")])]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// __proto__ 设置原型")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("__proto__")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" theProtoObj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Shorthand for ‘handler: handler’")]),t._v("\n  handler"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Methods")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Super calls")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"d "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Computed (dynamic) property names 动态属性名")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"prop_"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("2.在字符串字面值上使用字符串对象的所有方法，js会自动将字符串字面值转换一个临时的字符串对象，调用该方法，然后废弃到临时的字符串对象。在字符串中使用的特殊字符")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("字符")]),t._v(" "),s("th",[t._v("意思")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("\\0")]),t._v(" "),s("td",[t._v("Null字节")])]),t._v(" "),s("tr",[s("td",[t._v("\\b")]),t._v(" "),s("td",[t._v("退格符")])]),t._v(" "),s("tr",[s("td",[t._v("\\f")]),t._v(" "),s("td",[t._v("换页符")])]),t._v(" "),s("tr",[s("td",[t._v("\\n")]),t._v(" "),s("td",[t._v("换行符")])]),t._v(" "),s("tr",[s("td",[t._v("\\r")]),t._v(" "),s("td",[t._v("回车符")])]),t._v(" "),s("tr",[s("td",[t._v("\\t")]),t._v(" "),s("td",[t._v("Tab")])]),t._v(" "),s("tr",[s("td",[t._v("\\v")]),t._v(" "),s("td",[t._v("垂直Tab")])]),t._v(" "),s("tr",[s("td",[t._v("'")]),t._v(" "),s("td",[t._v("单引号")])]),t._v(" "),s("tr",[s("td",[t._v("''")]),t._v(" "),s("td",[t._v("双引号")])]),t._v(" "),s("tr",[s("td",[t._v("\\")]),t._v(" "),s("td",[t._v("\\")])])])]),t._v(" "),s("h2",{attrs:{id:"异常处理语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#异常处理语句"}},[t._v("#")]),t._v(" 异常处理语句")]),t._v(" "),s("ol",[s("li",[t._v("throw语句\n使用throw语句抛出一个异常，当你抛出异常，一个含有值的表达式要被抛出")])]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Error2"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// String type")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Number type")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Boolean type")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"I\'m an object!"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 抛出异常时声明一个对象，catch中可以查询到对象属性")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Create an object type UserException")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("UserException")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("message")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("message "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" message"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"UserException"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Make the exception convert to a pretty string when used as")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// a string (e.g. by the error console)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserException")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("toString")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("': \"'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("message "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\"'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Create an instance of the object type and throw it")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserException")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Value too high"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),s("ol",{attrs:{start:"2"}},[s("li",[t._v("try...catch\n一个或多个try+0个或1个catch\ntry中语句块若抛异常，立即进入catch语句块\ntry中语句块无异常，则跳过catch语句块\nfinally语句块在try...catch后执行，finally返回的值，将是整个try-catch-finally流程返回值，不管try...catch发生了什么")]),t._v(" "),s("li",[t._v("使用Error对象\n根据错误类型，可以使用'name'和'message'获取信息，name提供了常规的错误类，而message提供了一条错误对象转字符串的简明信息。抛出个人异常的时候，应该使用Error构造函数")])]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Error")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'出错了'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h2",{attrs:{id:"循环"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#循环"}},[t._v("#")]),t._v(" 循环")]),t._v(" "),s("h3",{attrs:{id:"循环的几种方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#循环的几种方式"}},[t._v("#")]),t._v(" 循环的几种方式")]),t._v(" "),s("ul",[s("li",[t._v("for")]),t._v(" "),s("li",[t._v("do...while")]),t._v(" "),s("li",[t._v("while")]),t._v(" "),s("li",[t._v("for...in")]),t._v(" "),s("li",[t._v("for...of")])]),t._v(" "),s("h3",{attrs:{id:"label语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#label语句"}},[t._v("#")]),t._v(" label语句")]),t._v(" "),s("p",[t._v("添加label可以跳出整个循环，如")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("outPoint")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v(" outPoint"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在 i = 5，j = 5 时，跳出所有循环，")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回到整个 outPoint 下方，继续执行")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    num"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 此时num是55；跳出outPoint标识的循环，如果是continue，则是跳出本次循环，并跳转到标签后的循环内")]),t._v("\n")])])]),s("h3",{attrs:{id:"for-in与for-of的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#for-in与for-of的区别"}},[t._v("#")]),t._v(" for...in与for...of的区别")]),t._v(" "),s("ul",[s("li",[t._v("for...in:循环一个指定变量来循环一个对象的所有可枚举属性")]),t._v(" "),s("li",[t._v("for...of:在可迭代对象上创建一个循环，对值的每一个独特属性调用一个迭代。")])]),t._v(" "),s("p",[t._v("for...in循环数组的结果是元素的下标，而for...of是元素的值")]),t._v(" "),s("h2",{attrs:{id:"函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数"}},[t._v("#")]),t._v(" 函数")]),t._v(" "),s("h3",{attrs:{id:"定义函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#定义函数"}},[t._v("#")]),t._v(" 定义函数")]),t._v(" "),s("ul",[s("li",[t._v("函数声明:function关键词+函数名")]),t._v(" "),s("li",[t._v("函数表达式:")])]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 匿名函数")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 非匿名函数，为function提供名称，可以通过该名字调用。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fac")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("n")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\nn"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fac")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ul",[s("li",[t._v("Function对象构造函数:直接调用此构造函数可以动态创建函数，但构造函数创建的函数只能在全局作用域中运行。因此不会创建当前环境的闭包，因为它们总是被创建于全局环境。也就不能访问它们被构造函数创建时所在的作用域变量。")]),t._v(" "),s("li",[t._v("自定义构造函数：通过new关键词，首先创造出一个新的对象，然后将该对象的上下文作为构造函数的this。最后再将得到的对象返给变量")])]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getNewStudent")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("name")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),t._v("    \n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" student "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("getNewStudent")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//{ name:function(){return this}}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" student1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getNewStudent")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//1")]),t._v("\n")])])]),s("p",[t._v("注意：当构造函数的返回值是一个对象时，对传入的this设置的任何操作都无效，最终new 返回的就是这个指定对象而不是额外构造的对象。仅当值的类型不为对象时，构造函数将无视返回值，返回一个构造完毕的对象。")]),t._v(" "),s("h3",{attrs:{id:"调用函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#调用函数"}},[t._v("#")]),t._v(" 调用函数")]),t._v(" "),s("p",[t._v("函数根据调用方式分为三种")]),t._v(" "),s("ul",[s("li",[t._v("立即执行函数")]),t._v(" "),s("li",[t._v("方法")]),t._v(" "),s("li",[t._v("构造函数")])]),t._v(" "),s("p",[t._v("不同类型函数调用之间的区别主要在于：隐式传入的this指向不同，方法中的函数传入对象，立即执行函数传入window，构造函数传入对象实力。而apply和call可以显示地传递this指向。唯一的区别就是apply的传参是数组形式，call是列表形式。第一个参数是this指向，剩余参数就是函数的传参。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("juggle")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("apply")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ninja"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("juggle")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ninja"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("`\n")])])]),s("h3",{attrs:{id:"闭包与作用域链"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#闭包与作用域链"}},[t._v("#")]),t._v(" 闭包与作用域链")]),t._v(" "),s("p",[t._v("在一个函数内嵌套一个函数，嵌套函数对于容器函数来说是私有的，而嵌套函数自身也形成了一个闭包。")]),t._v(" "),s("p",[t._v("闭包的概念：封闭了表达式，闭包可以拥有独立变量以及绑定了这些变量的环境的表达式。嵌套函数可以“继承”容器函数的参数和变量，也就是包含了容器函数的作用域。容器函数却不能使用它的参数和变量。")]),t._v(" "),s("p",[t._v("作用域链：多层嵌套函数的关系中，如a中嵌套了b，b中嵌套了c，那么c的闭包包含了b的函数作用域，但是由于b的闭包包含了a的函数作用域，因此它们递归的包含了所有包含它的作用域，这就是作用域链。")]),t._v(" "),s("p",[t._v("在作用域链中，链的第一个元素就是最里面的作用域，最后一个是最外层的，所以当变量命名冲突时，更近的作用域拥有更高的优先级。")]),t._v(" "),s("p",[t._v("当然，由于这种优先级的存在，一旦出现冲突，内部函数将无法访问外部函数的这个变量，因为已经被内部函数的同名变量覆盖了。")]),t._v(" "),s("h3",{attrs:{id:"arguments对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#arguments对象"}},[t._v("#")]),t._v(" arguments对象")]),t._v(" "),s("p",[t._v("arguments对象保存函数的实参数，它是一个类数组，它可以使用索引访问数组，也可以使用数组的length属性，但是不具备其他Array对象的数组操作方法，所以称为类数组。")]),t._v(" "),s("h3",{attrs:{id:"函数参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数参数"}},[t._v("#")]),t._v(" 函数参数")]),t._v(" "),s("ul",[s("li",[t._v("默认参数：参数设置默认值，不设置即为undefined")])]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("multiply")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ul",[s("li",[t._v("剩余参数:使用...收集剩余的参数进一个数组。")])]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("multiply")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("multiplier"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("theArgs")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" theArgs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" multiplier "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" arr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("multiply")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h2",{attrs:{id:"表达式与运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#表达式与运算符"}},[t._v("#")]),t._v(" 表达式与运算符")]),t._v(" "),s("h3",{attrs:{id:"逻辑运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#逻辑运算符"}},[t._v("#")]),t._v(" 逻辑运算符")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("运算符")]),t._v(" "),s("th",[t._v("范例")]),t._v(" "),s("th",[t._v("说明")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("逻辑与&&")]),t._v(" "),s("td",[t._v("a&&b")]),t._v(" "),s("td",[t._v("a为true时，返回b")])]),t._v(" "),s("tr",[s("td",[t._v("逻辑或||")]),t._v(" "),s("td",[t._v("a||b")]),t._v(" "),s("td",[t._v("a为false时，返回b")])]),t._v(" "),s("tr",[s("td",[t._v("逻辑非!")]),t._v(" "),s("td",[t._v("!a")]),t._v(" "),s("td",[t._v("返回true/false")])])])]),t._v(" "),s("p",[t._v("注：短路求值的时候第二个表达式不会执行(如true||表达式)")]),t._v(" "),s("h3",{attrs:{id:"一元操作符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一元操作符"}},[t._v("#")]),t._v(" 一元操作符")]),t._v(" "),s("ul",[s("li",[t._v("delete\n删除一个对象的属性或者数组中的一个值。如果操作成功，返回true。删除数组中的元素时，只是将该索引的值变为了undefined，数组长度不变。")])]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" objectName"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("property"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" objectName"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("ul",[s("li",[t._v("typeof\n返回一个表示类型的字符串")])]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回string和boolean，字符串和布尔值，包括String()和Boolean()")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// returns "boolean"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello world"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// returns "string"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// returns 'string'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回number和bigint")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("62")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// returns "number" ')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("42n")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// returns 'bigint' ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// returns 'number' NaN返回数字类型")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回symbol，包括Symbol()")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Symbol")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'foo'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// returns 'symbol'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回undefined，包括不存在的变量或属性")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'undefined'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" ttttttt "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'undefined'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回function，包括es6的class、各个内置对象本身除了Math，以及Function()，new Function()")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("cs")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// returns 'function'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" parseInt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// returns "function"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" Date"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// returns "function" 内置对象返回function类型')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" Function"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// returns "function"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" Option"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// returns "function"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" String"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// returns "function"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回object，对象、数组、null、正则表达式，还有Math和JSON本身，还有使用new操作符的数据，除了Function以外")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// returns "object" null返回为对象类型')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" Math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// returns "object"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("d"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// returns 'object'")]),t._v("\n")])])]),s("p",[t._v("注意：\n1、在let和const之前无法typeof，会报错\n2、typeof null的解释：\n"),s("em",[t._v('在JavaScript 最初的实现中，JavaScript 中的值是由一个表示类型的标签和实际数据值表示的。对象的类型标签是 0。由于null代表的是空指针（大多数平台下值为 0x00），因此，null 的类型标签是 0，typeof null 也因此返回 "object"。')]),t._v("\n3、typeof无法精确判断出null、数组、对象、正则的类型，若想精准判断类型，需要使用Object.prototype.toString.call\n4、BigInt类型\nBigInt 来自于 ES11 增加的一种最新的基础类型，可以用任意精度表示整数。\n它提供了一种表示大于 2^53 - 1 整数的方法，能表示任意大的整数。\n它是通过在整数末尾附加 n 或调用构造函数 BigInt() 来创建的。\nIE 不支持。\n无法与number进行混合运算，会报类型错误")]),t._v(" "),s("ul",[s("li",[t._v("void\n表示一个运算没有返回值")])]),t._v(" "),s("h3",{attrs:{id:"关系运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#关系运算符"}},[t._v("#")]),t._v(" 关系运算符")]),t._v(" "),s("ul",[s("li",[t._v("in\n指定属性存在于指定对象中，则返回true")])]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" mycar "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("make")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Honda"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("model")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Accord"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("year")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1998")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"make"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" mycar"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// returns true")]),t._v("\n")])])]),s("ul",[s("li",[t._v("instanceof\n如果所判别的对象确实是所指定的类型，则返回true")])]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("objectName "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("objectType")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h2",{attrs:{id:"正则表达式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式"}},[t._v("#")]),t._v(" 正则表达式")]),t._v(" "),s("h3",{attrs:{id:"创建正则表达式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建正则表达式"}},[t._v("#")]),t._v(" 创建正则表达式")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" re "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("ab+c")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" re "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RegExp")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ab+c"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("两种方式的不同之处就是，用构造函数创建的正则表达式会被编译，如果是动态生成的或者将被改变的就需要用构造函数来创建。")]),t._v(" "),s("h3",{attrs:{id:"特殊字符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#特殊字符"}},[t._v("#")]),t._v(" 特殊字符")]),t._v(" "),s("ul",[s("li",[t._v("断言：表示一个匹配在某些条件下发生。")]),t._v(" "),s("li",[t._v("字符类：区分不同类型的字符，如字母和数字。")]),t._v(" "),s("li",[t._v("组和范围：表示表达式字符的分组和范围。")]),t._v(" "),s("li",[t._v("量词：表示匹配的字符或表达式的数量")]),t._v(" "),s("li",[t._v("Unicode属性转义：基于Unicode字符属性区分字符。例如大小写字母和数字符号标点等等。")])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("字符")]),t._v(" "),s("th",[t._v("含义")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("\\")]),t._v(" "),s("td",[t._v("转义符，注意传给构造函数的特殊字符要额外加一个转义符")])]),t._v(" "),s("tr",[s("td",[t._v("^")]),t._v(" "),s("td",[t._v('匹配输入的开始，如/^A/ 不会匹配"anA"中的A，但会匹配"Ana"中的A')])]),t._v(" "),s("tr",[s("td",[t._v("$")]),t._v(" "),s("td",[t._v("匹配输入的结束，同上")])]),t._v(" "),s("tr",[s("td",[t._v("*")]),t._v(" "),s("td",[t._v("匹配前一个表达式0次或多次，等价于{0,}")])]),t._v(" "),s("tr",[s("td",[t._v("+")]),t._v(" "),s("td",[t._v("匹配前一个表达式1次或多次，等价于{1,}")])]),t._v(" "),s("tr",[s("td",[t._v("?")]),t._v(" "),s("td",[t._v("匹配前一个表达式0次或1次，等价于{0,1}。如果紧跟在任何量词(*,+,?,{})后面，将会使量词变为非贪婪(匹配尽量少的字符)，缺省时则是贪婪模式。例如对“123abc”使用/\\d+/将会匹配123，但是/\\d+?/则只有1")])]),t._v(" "),s("tr",[s("td",[t._v(".")]),t._v(" "),s("td",[t._v("默认匹配除换行符之外的任何单个字符，如/.n/")])]),t._v(" "),s("tr",[s("td",[t._v("(x)")]),t._v(" "),s("td",[t._v("匹配x并记住匹配项 ，\\1,\\2表示第一个和第二个被捕获括号匹配的子字符串")])]),t._v(" "),s("tr",[s("td",[t._v("(?:x)")]),t._v(" "),s("td",[t._v("匹配x但是不记住匹配项，非捕获括号，可以当成子表达式用")])]),t._v(" "),s("tr",[s("td",[t._v("x(?=y)")]),t._v(" "),s("td",[t._v("匹配x但仅匹配紧跟y的x，先行断言")])]),t._v(" "),s("tr",[s("td",[t._v("(?<=y)x")]),t._v(" "),s("td",[t._v("匹配x但仅匹配前置是y的x，后行断言")])]),t._v(" "),s("tr",[s("td",[t._v("x(?!y)")]),t._v(" "),s("td",[t._v("匹配x但仅匹配不跟着y的x，正向否定查找")])]),t._v(" "),s("tr",[s("td",[t._v("(<!y)x")]),t._v(" "),s("td",[t._v("匹配x但仅匹配前置不是y的x，反向否定查找")])]),t._v(" "),s("tr",[s("td",[t._v("x")]),t._v(" "),s("td",[t._v("y")])]),t._v(" "),s("tr",[s("td",[t._v("{n}")]),t._v(" "),s("td",[t._v("匹配前面一个字符刚好出现了几次")])]),t._v(" "),s("tr",[s("td",[t._v("{n,}")]),t._v(" "),s("td",[t._v("匹配前面一个字符至少出现了几次")])]),t._v(" "),s("tr",[s("td",[t._v("{n,m}")]),t._v(" "),s("td",[t._v("匹配前面一个字符至少出现n次，至多出现m次")])]),t._v(" "),s("tr",[s("td",[t._v("[xyz]")]),t._v(" "),s("td",[t._v("一个字符集合，匹配方括号内的任意字符，可以用-来指定范围")])]),t._v(" "),s("tr",[s("td",[t._v("[^xyz]")]),t._v(" "),s("td",[t._v("一个反向字符集合，匹配没有在方括号内的任意字符，可以用-来指定范围")])]),t._v(" "),s("tr",[s("td",[t._v("[\\b]")]),t._v(" "),s("td",[t._v("匹配一个退格")])]),t._v(" "),s("tr",[s("td",[t._v("\\b")]),t._v(" "),s("td",[t._v("匹配一个词的边界，开头或者结尾，比如放后面就是以xx结尾，放前面就是以xx开头")])]),t._v(" "),s("tr",[s("td",[t._v("\\B")]),t._v(" "),s("td",[t._v("匹配一个非单词边界，字符串第一个或者最后一个字符为非‘字’字符")])]),t._v(" "),s("tr",[s("td",[t._v("\\cX")]),t._v(" "),s("td",[t._v("当X是处于A到Z之间的字符的时候，匹配字符串中的一个控制符")])]),t._v(" "),s("tr",[s("td",[t._v("\\d")]),t._v(" "),s("td",[t._v("匹配一个数字，等价于[0-9]")])]),t._v(" "),s("tr",[s("td",[t._v("\\D")]),t._v(" "),s("td",[t._v("匹配一个非数字字符，等价于[^0-9]")])]),t._v(" "),s("tr",[s("td",[t._v("\\f")]),t._v(" "),s("td",[t._v("匹配一个换页符")])]),t._v(" "),s("tr",[s("td",[t._v("\\n")]),t._v(" "),s("td",[t._v("匹配一个换行符")])]),t._v(" "),s("tr",[s("td",[t._v("\\r")]),t._v(" "),s("td",[t._v("匹配一个回车符")])]),t._v(" "),s("tr",[s("td",[t._v("\\s")]),t._v(" "),s("td",[t._v("匹配一个空白字符，包括空格、制表符、换页符、换行符")])]),t._v(" "),s("tr",[s("td",[t._v("\\S")]),t._v(" "),s("td",[t._v("匹配一个非空白字符")])]),t._v(" "),s("tr",[s("td",[t._v("\\t")]),t._v(" "),s("td",[t._v("匹配一个水平制表符")])]),t._v(" "),s("tr",[s("td",[t._v("\\v")]),t._v(" "),s("td",[t._v("匹配一个垂直制表符")])]),t._v(" "),s("tr",[s("td",[t._v("\\w")]),t._v(" "),s("td",[t._v("匹配一个单字字符，相当于[A-Za-z0-9]")])]),t._v(" "),s("tr",[s("td",[t._v("\\W")]),t._v(" "),s("td",[t._v("匹配一个非单字字符")])]),t._v(" "),s("tr",[s("td",[t._v("\\n")]),t._v(" "),s("td",[t._v("第n个子捕获匹配的字符串")])]),t._v(" "),s("tr",[s("td",[t._v("\\0")]),t._v(" "),s("td",[t._v("匹配null字符串")])])])]),t._v(" "),s("h4",{attrs:{id:"使用插入语"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用插入语"}},[t._v("#")]),t._v(" 使用插入语")]),t._v(" "),s("p",[t._v("任何正则表达式的插入语都会使这部分匹配的副字符串被记忆。一旦被记忆，这个副字符串就可以被调用于其他用途。\n比如/Chapter (\\d+).\\d*/用于匹配\"Open Chapter 4.3, paragraph 6\"时，'4'会被记住。\n但是括号内用?:\\d+则不会被记住")])])}),[],!1,null,null,null);s.default=r.exports}}]);